// Generated by CoffeeScript 1.6.3
(function() {
  var render, str, type;

  str = function(x) {
    return JSON.stringify(x);
  };

  type = function(x) {
    return Object.prototype.toString.call(x).match(/\s\w+/)[0].trim().toLowerCase();
  };

  render = function(content) {
    var append, append_item, append_pair, buffer, dups, jumps, make, newline, small_break, write;
    buffer = "";
    small_break = false;
    dups = function(indent) {
      var piece;
      piece = "";
      if (small_break) {
        small_break = false;
        return "";
      }
      while (indent > 0) {
        piece += "  ";
        indent -= 1;
      }
      return piece;
    };
    jumps = function(indent) {
      return buffer += dups(indent);
    };
    write = function(value) {
      return buffer += value;
    };
    append = function(value) {
      buffer += str(value);
      return newline();
    };
    newline = function() {
      return buffer += "\n";
    };
    append_item = function(indent, item) {
      jumps(indent);
      write("- ");
      return make(indent, item, "array");
    };
    append_pair = function(indent, key, value) {
      jumps(indent);
      if (key.match(/[\w\d-]+/)) {
        write(key);
      } else {
        write(str(key));
      }
      write(": ");
      return make(indent, value, "object");
    };
    make = function(indent, data, outer) {
      var key, value, _results;
      switch (type(data)) {
        case "array":
          if (outer === "object") {
            indent -= 1;
          }
          newline();
          return data.map(function(item) {
            return append_item(indent + 1, item);
          });
        case "object":
          if (outer === "array") {
            small_break = true;
          } else {
            newline();
          }
          _results = [];
          for (key in data) {
            value = data[key];
            _results.push(append_pair(indent + 1, key, value));
          }
          return _results;
          break;
        default:
          return append(data);
      }
    };
    make(0, content);
    return buffer;
  };

  if (typeof define !== "undefined" && define !== null) {
    define({
      render: render
    });
  } else if (typeof exports !== "undefined" && exports !== null) {
    exports.render = render;
  } else if (typeof window !== "undefined" && window !== null) {
    window.compactJsonRender = render;
  }

}).call(this);

/*
//@ sourceMappingURL=compact.map
*/
